{*
Example for Expand Click

    Date          : Nov 2018.
    Author        : Nenad Filipovic

Test configuration PIC :
    
    MCU             : P18F87K22
    Dev. Board      : EasyPIC PRO v7
    PIC Compiler ver : v7.2.0.0

---

Description :

The application is composed of three sections :

- System Initialization - Initializes GPIO and LOG structures,
     set CS and RST pins as output, INT pin as input.
- Application Initialization - Initialization driver enable's - GPIO,
     reset MCP23S17 chip, set PORTA to be output and PORTB to be input,
     set default configuration and start write log.
- Application Task - (code snippet) This is a example which demonstrates the use of Expand Click board.
     Expand Click communicates with register via SPI protocol by write and read from register,
     set configuration and state and read configuration and state.
     Results are being sent to the Usart Terminal where you can track their changes.
     All data logs on usb uart for aproximetly every 3 sec.

*}
program Click_Expand_PIC;

uses Click_Expand_types, Click_Expand_config;

var
    portStatus : uint8_t; 
    position : uint8_t; 
    pinPosition : uint16_t; 
    logText : array[50] of char; 
    
procedure systemInit(); 
begin

    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_INT_PIN, _GPIO_INPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_CS_PIN, _GPIO_OUTPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_RST_PIN, _GPIO_OUTPUT); 
    mikrobus_spiInit(_MIKROBUS1, @_EXPAND_SPI_CFG[0]); 
    mikrobus_logInit(_LOG_USBUART, 9600); 
    Delay_ms(100); 

end;

procedure applicationInit(); 
begin

    expand_spiDriverInit(T_EXPAND_P(@_MIKROBUS1_GPIO), T_EXPAND_P(@_MIKROBUS1_SPI)); 
    expand_reset(); 
    Delay_ms(1000); 
    mikrobus_logWrite('----------------', _LOG_LINE); 
    mikrobus_logWrite('  Expand Click  ', _LOG_LINE); 
    mikrobus_logWrite('----------------', _LOG_LINE); 
    expand_setDirectionPortA(_EXPAND_SPI_MODULE_POSITION_0, _EXPAND_PORT_DIRECTION_OUTPUT); 
    expand_setDirectionPortB(_EXPAND_SPI_MODULE_POSITION_0, _EXPAND_PORT_DIRECTION_INPUT); 
    mikrobus_logWrite(' Configuring... ', _LOG_LINE); 
    mikrobus_logWrite('----------------', _LOG_LINE); 
    expand_defaultConfiguration(_EXPAND_SPI_MODULE_POSITION_0); 

end;

procedure applicationTask(); 
begin

    pinPosition := 1; 
    for position := 0 to 8-1 do 
    begin
        expand_writePortA(_EXPAND_SPI_MODULE_POSITION_0, pinPosition); 
        Delay_100ms(); 
        portStatus := expand_readPortB(_EXPAND_SPI_MODULE_POSITION_0); 
        IntToStr(position, logText); 
        mikrobus_logWrite('       RA', _LOG_TEXT); 
        ltrim(logText); 
        mikrobus_logWrite(logText, _LOG_LINE); 
        IntToStr(portStatus, logText); 
        mikrobus_logWrite('  PORTB: ', _LOG_TEXT); 
        mikrobus_logWrite(logText, _LOG_LINE); 
        mikrobus_logWrite('----------------', _LOG_LINE); 
        pinPosition := (pinPosition shl 1); 
        Delay_ms(3000); 
    end;

end;

begin

    systemInit(); 
    applicationInit(); 
    while (1) do 
    begin 
        applicationTask(); 
    end;

end.